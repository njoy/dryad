# standard imports
import unittest

# third party imports

# local imports
from dryad import InteractionType
from dryad.id import ElectronSubshellID
from dryad.id import LevelID
from dryad.id import ParticleID
from dryad.id import ReactionType

class Test_elementary_ReactionType( unittest.TestCase ) :
    """Unit test for the ReactionType class."""

    def test_values( self ) :

        g = ParticleID.photon()
        n = ParticleID.neutron()
        p = ParticleID.proton()
        d = ParticleID.deuteron()
        t = ParticleID.triton()
        h = ParticleID.helion()
        a = ParticleID.alpha()
        eminus = ParticleID.electron()
        eplus = ParticleID.positron()

        u = ParticleID( 92000 )
        u238 = ParticleID( 92238 )

        nuclear = InteractionType.Nuclear
        atomic = InteractionType.Atomic

        empty = []

        # special numbers
        id = ReactionType.total()
        self.assertEqual( 1, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'total', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType.total( InteractionType.Nuclear ) )
        self.assertEqual( id, ReactionType( 1 ) )
        self.assertEqual( id, ReactionType( 'total' ) )
        self.assertEqual( id, ReactionType( 'total[nuclear]' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 3 )
        self.assertEqual( 3, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'non-elastic', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'non-elastic' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 5 )
        self.assertEqual( 5, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'anything', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'anything' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 18 )
        self.assertEqual( 18, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'fission(t)', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'fission(t)' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 19 )
        self.assertEqual( 19, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'fission', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'fission' ) )
        self.assertEqual( id, ReactionType( 'fission1' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 20 )
        self.assertEqual( 20, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'fission[n]', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'fission[n]' ) )
        self.assertEqual( id, ReactionType( 'fission2' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 21 )
        self.assertEqual( 21, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'fission[2n]', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'fission[2n]' ) )
        self.assertEqual( id, ReactionType( 'fission3' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 38 )
        self.assertEqual( 38, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'fission[3n]', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'fission[3n]' ) )
        self.assertEqual( id, ReactionType( 'fission4' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 27 )
        self.assertEqual( 27, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'absorption', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'absorption' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        id = ReactionType( 101 )
        self.assertEqual( 101, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'disappearance', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'disappearance' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( n, u238 )

        # standard incident neutron and charged particle reaction types
        id = ReactionType.elastic( g )
        self.assertEqual( None, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'g(0)', id.symbol )
        self.assertEqual( [], id.particles )
        self.assertEqual( 0, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'g(0)' ) )
        self.assertEqual( u238, id.resolve( g, u238 ) )

        id = ReactionType.elastic( n )
        self.assertEqual( 50, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'n(0)', id.symbol )
        self.assertEqual( [ ( n, 1 ) ], id.particles )
        self.assertEqual( 0, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'n(0)' ) )
        self.assertEqual( u238, id.resolve( n, u238 ) )

        id = ReactionType.elastic( p )
        self.assertEqual( 600, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'p(0)', id.symbol )
        self.assertEqual( [ ( p, 1 ) ], id.particles )
        self.assertEqual( 0, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'p(0)' ) )
        self.assertEqual( u238, id.resolve( p, u238 ) )

        id = ReactionType.elastic( d )
        self.assertEqual( 650, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'd(0)', id.symbol )
        self.assertEqual( [ ( d, 1 ) ], id.particles )
        self.assertEqual( 0, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'd(0)' ) )
        self.assertEqual( u238, id.resolve( d, u238 ) )

        id = ReactionType.elastic( t )
        self.assertEqual( 700, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 't(0)', id.symbol )
        self.assertEqual( [ ( t, 1 ) ], id.particles )
        self.assertEqual( 0, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 't(0)' ) )
        self.assertEqual( u238, id.resolve( t, u238 ) )

        id = ReactionType.elastic( h )
        self.assertEqual( 750, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'h(0)', id.symbol )
        self.assertEqual( [ ( h, 1 ) ], id.particles )
        self.assertEqual( 0, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'h(0)' ) )
        self.assertEqual( u238, id.resolve( h, u238 ) )

        id = ReactionType.elastic( a )
        self.assertEqual( 800, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'a(0)', id.symbol )
        self.assertEqual( [ ( a, 1 ) ], id.particles )
        self.assertEqual( 0, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'a(0)' ) )
        self.assertEqual( u238, id.resolve( a, u238 ) )

        id = ReactionType( 4 )
        self.assertEqual( 4, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( 'n(t)', id.symbol )
        self.assertEqual( [ ( n, 1 ) ], id.particles )
        self.assertEqual( LevelID.all, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'n' ) )
        self.assertEqual( id, ReactionType( 'n(t)' ) )
        self.assertEqual( ParticleID( 92238, LevelID.all ), id.resolve( n, u238 ) )

        id = ReactionType( 875 )
        self.assertEqual( 875, id.mt )
        self.assertEqual( nuclear, id.interaction_type )
        self.assertEqual( '2n(0)', id.symbol )
        self.assertEqual( [ ( n, 2 ) ], id.particles )
        self.assertEqual( 0, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( '2n(0)' ) )
        self.assertEqual( ParticleID( 92237 ), id.resolve( n, u238 ) )

        # photoatomic and electroatomic reaction types
        id = ReactionType.total( InteractionType.Atomic )
        self.assertEqual( 501, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'total[atomic]', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 501 ) )
        self.assertEqual( id, ReactionType( 'total[atomic]' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( g, u )

        id = ReactionType( 502 )
        self.assertEqual( 502, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'g[coherent]', id.symbol )
        self.assertEqual( empty, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'coherent' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( 504 )
        self.assertEqual( 504, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'g[incoherent]', id.symbol )
        self.assertEqual( empty, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'incoherent' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( 'e-[deficit-scattering]' ) # no mt number for this
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'e-[deficit-scattering]', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'deficit-scattering' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( 525 )
        self.assertEqual( 525, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'e-[large-angle-scattering]', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'e-[large-angle-scattering]' ) )
        self.assertEqual( id, ReactionType( 'large-angle-scattering' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( 515 )
        self.assertEqual( 515, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'e-e+', id.symbol )
        self.assertEqual( [ ( eminus, 1 ), ( eplus, 1 ) ], id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'e-e+' ) )
        self.assertEqual( id, ReactionType( 'e-e+[nuclear]' ) )
        self.assertEqual( id, ReactionType( 'pair-production[nuclear]' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( 517 )
        self.assertEqual( 517, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( '2e-e+', id.symbol )
        self.assertEqual( [ ( eminus, 2 ), ( eplus, 1 ) ], id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( '2e-e+' ) )
        self.assertEqual( id, ReactionType( '2e-e+[electron]' ) )
        self.assertEqual( id, ReactionType( 'pair-production[electron]' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( 516 )
        self.assertEqual( 516, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'pair-production', id.symbol )
        self.assertEqual( None, id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( True, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'pair-production' ) )
        with self.assertRaises( RuntimeError ) : id.resolve( g, u )

        id = ReactionType( 527 )
        self.assertEqual( 527, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'e-[bremsstrahlung]', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'e-[bremsstrahlung]' ) )
        self.assertEqual( id, ReactionType( 'bremsstrahlung' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( 528 )
        self.assertEqual( 528, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'e-[excitation]', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'e-[excitation]' ) )
        self.assertEqual( id, ReactionType( 'excitation' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( g, 534 )
        self.assertEqual( 534, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{1s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.K, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{1s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.K ), id.resolve( eminus, u ) )

        id = ReactionType( g, 535 )
        self.assertEqual( 535, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{2s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.L1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{2s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.L1 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 536 )
        self.assertEqual( 536, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{2p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.L2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{2p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.L2 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 537 )
        self.assertEqual( 537, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{2p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.L3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{2p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.L3 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 538 )
        self.assertEqual( 538, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{3s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{3s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M1 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 539 )
        self.assertEqual( 539, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{3p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{3p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M2 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 540 )
        self.assertEqual( 540, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{3p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{3p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M3 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 541 )
        self.assertEqual( 541, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{3d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{3d3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M4 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 542 )
        self.assertEqual( 542, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{3d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{3d5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M5 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 543 )
        self.assertEqual( 543, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{4s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{4s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N1 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 544 )
        self.assertEqual( 544, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{4p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{4p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N2 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 545 )
        self.assertEqual( 545, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{4p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{4p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N3 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 546 )
        self.assertEqual( 546, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{4d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{4d3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N4 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 547 )
        self.assertEqual( 547, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{4d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{4d5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N5 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 548 )
        self.assertEqual( 548, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{4f5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N6, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{4f5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N6 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 549 )
        self.assertEqual( 549, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{4f7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N7, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{4f7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N7 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 550 )
        self.assertEqual( 550, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O1 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 551 )
        self.assertEqual( 551, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O2 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 552 )
        self.assertEqual( 552, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O3 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 553 )
        self.assertEqual( 553, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5d3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O4 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 554 )
        self.assertEqual( 554, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5d5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O5 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 555 )
        self.assertEqual( 555, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5f5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O6, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5f5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O6 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 556 )
        self.assertEqual( 556, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5f7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O7, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5f7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O7 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 557 )
        self.assertEqual( 557, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5g7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O8, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5g7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O8 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 558 )
        self.assertEqual( 558, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{5g9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O9, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{5g9/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O9 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 559 )
        self.assertEqual( 559, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P1 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 560 )
        self.assertEqual( 560, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P2 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 561 )
        self.assertEqual( 561, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P3 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 562 )
        self.assertEqual( 562, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6d3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P4 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 563 )
        self.assertEqual( 563, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6d5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P5 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 564 )
        self.assertEqual( 564, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6f5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P6, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6f5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P6 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 565 )
        self.assertEqual( 565, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6f7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P7, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6f7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P7 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 566 )
        self.assertEqual( 566, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6g7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P8, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6g7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P8 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 567 )
        self.assertEqual( 567, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6g9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P9, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6g9/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P9 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 568 )
        self.assertEqual( 568, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6h9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P10, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6h9/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P10 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 569 )
        self.assertEqual( 569, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{6h11/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P11, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{6h11/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P11 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 570 )
        self.assertEqual( 570, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{7s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q1 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 571 )
        self.assertEqual( 571, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{7p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q2 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 572 )
        self.assertEqual( 572, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation{7p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q3 ), id.resolve( eminus, u ) )

        # the next set do not have mt numbers assigned to them
        id = ReactionType( 'photo-ionisation{7d3/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q4 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7d5/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q5 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7f5/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7f5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q6, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q6 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7f7/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7f7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q7, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q7 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7g7/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7g7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q8, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q8 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7g9/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7g9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q9, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q9 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7h9/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7h9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q10, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q10 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7h11/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7h11/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q11, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q11 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7i11/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7i11/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q12, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q12 ), id.resolve( eminus, u ) )

        id = ReactionType( 'photo-ionisation{7i13/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation{7i13/2}', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q13, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q13 ), id.resolve( eminus, u ) )

        id = ReactionType( g, 522 )
        self.assertEqual( 522, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'photo-ionisation', id.symbol )
        self.assertEqual( [ ( eminus, 1 ) ] , id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'photo-ionisation' ) )
        self.assertEqual( id, ReactionType( 'photo-ionisation{t}' ) )
        self.assertEqual( u, id.resolve( g, u ) )

        id = ReactionType( eminus, 534 )
        self.assertEqual( 534, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{1s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.K, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{1s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.K ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 535 )
        self.assertEqual( 535, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{2s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.L1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{2s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.L1 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 536 )
        self.assertEqual( 536, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{2p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.L2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{2p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.L2 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 537 )
        self.assertEqual( 537, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{2p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.L3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{2p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.L3 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 538 )
        self.assertEqual( 538, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{3s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{3s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M1 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 539 )
        self.assertEqual( 539, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{3p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{3p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M2 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 540 )
        self.assertEqual( 540, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{3p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{3p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M3 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 541 )
        self.assertEqual( 541, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{3d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{3d3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M4 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 542 )
        self.assertEqual( 542, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{3d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.M5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{3d5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.M5 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 543 )
        self.assertEqual( 543, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{4s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{4s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N1 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 544 )
        self.assertEqual( 544, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{4p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{4p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N2 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 545 )
        self.assertEqual( 545, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{4p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{4p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N3 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 546 )
        self.assertEqual( 546, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{4d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{4d3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N4 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 547 )
        self.assertEqual( 547, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{4d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{4d5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N5 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 548 )
        self.assertEqual( 548, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{4f5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N6, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{4f5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N6 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 549 )
        self.assertEqual( 549, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{4f7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.N7, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{4f7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.N7 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 550 )
        self.assertEqual( 550, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O1 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 551 )
        self.assertEqual( 551, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O2 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 552 )
        self.assertEqual( 552, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O3 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 553 )
        self.assertEqual( 553, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5d3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O4 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 554 )
        self.assertEqual( 554, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5d5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O5 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 555 )
        self.assertEqual( 555, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5f5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O6, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5f5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O6 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 556 )
        self.assertEqual( 556, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5f7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O7, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5f7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O7 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 557 )
        self.assertEqual( 557, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5g7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O8, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5g7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O8 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 558 )
        self.assertEqual( 558, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{5g9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.O9, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{5g9/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.O9 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 559 )
        self.assertEqual( 559, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P1 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 560 )
        self.assertEqual( 560, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P2 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 561 )
        self.assertEqual( 561, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P3 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 562 )
        self.assertEqual( 562, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6d3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P4 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 563 )
        self.assertEqual( 563, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6d5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P5 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 564 )
        self.assertEqual( 564, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6f5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P6, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6f5/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P6 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 565 )
        self.assertEqual( 565, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6f7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P7, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6f7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P7 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 566 )
        self.assertEqual( 566, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6g7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P8, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6g7/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P8 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 567 )
        self.assertEqual( 567, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6g9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P9, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6g9/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P9 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 568 )
        self.assertEqual( 568, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6h9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P10, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6h9/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P10 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 569 )
        self.assertEqual( 569, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{6h11/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.P11, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{6h11/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.P11 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 570 )
        self.assertEqual( 570, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7s1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q1, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{7s1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q1 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 571 )
        self.assertEqual( 571, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7p1/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q2, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{7p1/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q2 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 572 )
        self.assertEqual( 572, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7p3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q3, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation{7p3/2}' ) )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q3 ), id.resolve( eminus, u ) )

        # the next set do not have mt numbers assigned to them
        id = ReactionType( 'electro-ionisation{7d3/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7d3/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q4, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q4 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7d5/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7d5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q5, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q5 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7f5/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7f5/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q6, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q6 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7f7/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7f7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q7, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q7 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7g7/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7g7/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q8, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q8 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7g9/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7g9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q9, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q9 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7h9/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7h9/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q10, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q10 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7h11/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7h11/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q11, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q11 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7i11/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7i11/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q12, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q12 ), id.resolve( eminus, u ) )

        id = ReactionType( 'electro-ionisation{7i13/2}' )
        self.assertEqual( None, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation{7i13/2}', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( ElectronSubshellID.Q13, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( False, id.is_compatible_with_endf )
        self.assertEqual( ParticleID( 92000, ElectronSubshellID.Q13 ), id.resolve( eminus, u ) )

        id = ReactionType( eminus, 522 )
        self.assertEqual( 522, id.mt )
        self.assertEqual( atomic, id.interaction_type )
        self.assertEqual( 'electro-ionisation', id.symbol )
        self.assertEqual( [ ( eminus, 2 ) ] , id.particles )
        self.assertEqual( None, id.level )
        self.assertEqual( False, id.is_special )
        self.assertEqual( True, id.is_compatible_with_endf )
        self.assertEqual( id, ReactionType( 'electro-ionisation' ) )
        self.assertEqual( id, ReactionType( 'electro-ionisation{t}' ) )
        self.assertEqual( u, id.resolve( eminus, u ) )

    def test_key( self ) :

        id1 = ReactionType( 50 )
        id2 = ReactionType( 600 )

        map = { id1 : '1', id2 : '2' }

        self.assertEqual( map[ id1 ], '1' )
        self.assertEqual( map[ id2 ], '2' )
        self.assertEqual( map[ ReactionType( 50 ) ], '1' )
        self.assertEqual( map[ ReactionType( 600 ) ], '2' )

    def test_failures( self ) :

        n = ParticleID.neutron()

        # illegal values
        with self.assertRaises( IndexError ) : id = ReactionType( 'not a reaction type symbol' )
        with self.assertRaises( IndexError ) : id = ReactionType( -1000 )
        with self.assertRaises( IndexError ) : id = ReactionType( 2 )      # 2 has no meaning without knowing the incident particle type
        with self.assertRaises( RuntimeError ) : id = ReactionType( n, 534 ) # ionisation has no meaning for particles other than photons and electrons

        with self.assertRaises( IndexError ) : id = ReactionType( 534 )
        with self.assertRaises( IndexError ) : id = ReactionType( 535 )
        with self.assertRaises( IndexError ) : id = ReactionType( 536 )
        with self.assertRaises( IndexError ) : id = ReactionType( 537 )
        with self.assertRaises( IndexError ) : id = ReactionType( 538 )
        with self.assertRaises( IndexError ) : id = ReactionType( 539 )
        with self.assertRaises( IndexError ) : id = ReactionType( 540 )
        with self.assertRaises( IndexError ) : id = ReactionType( 541 )
        with self.assertRaises( IndexError ) : id = ReactionType( 542 )
        with self.assertRaises( IndexError ) : id = ReactionType( 543 )
        with self.assertRaises( IndexError ) : id = ReactionType( 544 )
        with self.assertRaises( IndexError ) : id = ReactionType( 545 )
        with self.assertRaises( IndexError ) : id = ReactionType( 546 )
        with self.assertRaises( IndexError ) : id = ReactionType( 547 )
        with self.assertRaises( IndexError ) : id = ReactionType( 548 )
        with self.assertRaises( IndexError ) : id = ReactionType( 549 )
        with self.assertRaises( IndexError ) : id = ReactionType( 550 )
        with self.assertRaises( IndexError ) : id = ReactionType( 551 )
        with self.assertRaises( IndexError ) : id = ReactionType( 552 )
        with self.assertRaises( IndexError ) : id = ReactionType( 553 )
        with self.assertRaises( IndexError ) : id = ReactionType( 554 )
        with self.assertRaises( IndexError ) : id = ReactionType( 555 )
        with self.assertRaises( IndexError ) : id = ReactionType( 556 )
        with self.assertRaises( IndexError ) : id = ReactionType( 557 )
        with self.assertRaises( IndexError ) : id = ReactionType( 558 )
        with self.assertRaises( IndexError ) : id = ReactionType( 559 )
        with self.assertRaises( IndexError ) : id = ReactionType( 560 )
        with self.assertRaises( IndexError ) : id = ReactionType( 561 )
        with self.assertRaises( IndexError ) : id = ReactionType( 562 )
        with self.assertRaises( IndexError ) : id = ReactionType( 563 )
        with self.assertRaises( IndexError ) : id = ReactionType( 564 )
        with self.assertRaises( IndexError ) : id = ReactionType( 565 )
        with self.assertRaises( IndexError ) : id = ReactionType( 566 )
        with self.assertRaises( IndexError ) : id = ReactionType( 567 )
        with self.assertRaises( IndexError ) : id = ReactionType( 568 )
        with self.assertRaises( IndexError ) : id = ReactionType( 569 )
        with self.assertRaises( IndexError ) : id = ReactionType( 570 )
        with self.assertRaises( IndexError ) : id = ReactionType( 571 )
        with self.assertRaises( IndexError ) : id = ReactionType( 572 )
        with self.assertRaises( IndexError ) : id = ReactionType( 522 )

if __name__ == '__main__' :

    unittest.main()