#ifndef NJOY_DRYAD_FORMAT_ENDF_REACTIONINFORMATION
#define NJOY_DRYAD_FORMAT_ENDF_REACTIONINFORMATION

// system includes
#include <map>
#include <unordered_set>

// other includes
#include "ENDFtk/Material.hpp"
#include "ENDFtk/tree/Material.hpp"

namespace njoy {
namespace dryad {
namespace format {
namespace endf {

  /**
   *  @brief A class related to ENDF reaction information
   */
  class ReactionInformation {

    /* helper class */
    #include "dryad/format/endf/ReactionInformation/Entry.hpp"

    inline static const std::map< int, Entry > entries_ = {

      {   2, Entry(   1, { 1, 0, 0, 0, 0, 0 } ) },  // elastic
      {   4, Entry(   1, { 1, 0, 0, 0, 0, 0 } ) },  // total inelastic
      {  11, Entry(  11, { 2, 0, 1, 0, 0, 0 } ) },  // z,2nd
      {  16, Entry(  16, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n
      {  17, Entry(  17, { 3, 0, 0, 0, 0, 0 } ) },  // z,3n
      {  22, Entry(  22, { 1, 0, 0, 0, 0, 1 } ) },  // z,na
      {  23, Entry(  22, { 1, 0, 0, 0, 0, 3 } ) },  // z,n3a
      {  24, Entry(  24, { 2, 0, 0, 0, 0, 1 } ) },  // z,2na
      {  25, Entry(  25, { 3, 0, 0, 0, 0, 1 } ) },  // z,3na
      {  28, Entry(  28, { 1, 1, 0, 0, 0, 0 } ) },  // z,np
      {  29, Entry(  29, { 1, 0, 0, 0, 0, 2 } ) },  // z,n2a
      {  30, Entry(  30, { 2, 0, 0, 0, 0, 2 } ) },  // z,2n2a
      {  32, Entry(  32, { 1, 0, 1, 0, 0, 0 } ) },  // z,nd
      {  33, Entry(  33, { 1, 0, 0, 1, 0, 0 } ) },  // z,nt
      {  34, Entry(  34, { 1, 0, 0, 0, 1, 0 } ) },  // z,nh
      {  35, Entry(  35, { 1, 0, 1, 0, 0, 2 } ) },  // z,nd2a
      {  36, Entry(  36, { 1, 0, 0, 1, 0, 2 } ) },  // z,nt2a
      {  37, Entry(  37, { 4, 0, 0, 0, 0, 0 } ) },  // z,4n
      {  41, Entry(  41, { 2, 1, 0, 0, 0, 0 } ) },  // z,2np
      {  42, Entry(  42, { 3, 1, 0, 0, 0, 0 } ) },  // z,3np
      {  44, Entry(  44, { 1, 2, 0, 0, 0, 0 } ) },  // z,n2p
      {  45, Entry(  45, { 1, 1, 0, 0, 0, 1 } ) },  // z,npa
      {  50, Entry(  50, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(0)
      {  51, Entry(  51, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(1)
      {  52, Entry(  52, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(2)
      {  53, Entry(  53, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(3)
      {  54, Entry(  54, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(4)
      {  55, Entry(  55, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(5)
      {  56, Entry(  56, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(6)
      {  57, Entry(  57, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(7)
      {  58, Entry(  58, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(8)
      {  59, Entry(  59, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(9)
      {  60, Entry(  60, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(10)
      {  61, Entry(  61, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(11)
      {  62, Entry(  62, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(12)
      {  63, Entry(  63, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(13)
      {  64, Entry(  64, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(14)
      {  65, Entry(  65, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(15)
      {  66, Entry(  66, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(16)
      {  67, Entry(  67, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(17)
      {  68, Entry(  68, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(18)
      {  69, Entry(  69, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(19)
      {  70, Entry(  70, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(20)
      {  71, Entry(  71, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(21)
      {  72, Entry(  72, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(22)
      {  73, Entry(  73, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(23)
      {  74, Entry(  74, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(24)
      {  75, Entry(  75, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(25)
      {  76, Entry(  76, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(26)
      {  77, Entry(  77, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(27)
      {  78, Entry(  78, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(28)
      {  79, Entry(  79, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(29)
      {  80, Entry(  80, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(30)
      {  81, Entry(  81, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(31)
      {  82, Entry(  82, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(32)
      {  83, Entry(  83, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(33)
      {  84, Entry(  84, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(34)
      {  85, Entry(  85, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(35)
      {  86, Entry(  86, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(36)
      {  87, Entry(  87, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(37)
      {  88, Entry(  88, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(38)
      {  89, Entry(  89, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(39)
      {  90, Entry(  90, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(40)
      {  91, Entry(  91, { 1, 0, 0, 0, 0, 0 } ) },  // z,n(continuum)
      { 103, Entry( 103, { 0, 1, 0, 0, 0, 0 } ) },  // z,p
      { 104, Entry( 104, { 0, 0, 1, 0, 0, 0 } ) },  // z,d
      { 105, Entry( 105, { 0, 0, 0, 1, 0, 0 } ) },  // z,t
      { 106, Entry( 106, { 0, 0, 0, 0, 1, 0 } ) },  // z,h
      { 107, Entry( 107, { 0, 0, 0, 0, 0, 1 } ) },  // z,a
      { 108, Entry( 108, { 0, 0, 0, 0, 0, 2 } ) },  // z,2a
      { 109, Entry( 109, { 0, 0, 0, 0, 0, 3 } ) },  // z,3a
      { 111, Entry( 111, { 0, 2, 0, 0, 0, 0 } ) },  // z,2p
      { 112, Entry( 112, { 0, 1, 0, 0, 0, 1 } ) },  // z,pa
      { 113, Entry( 113, { 0, 0, 0, 1, 0, 2 } ) },  // z,t2a
      { 114, Entry( 114, { 0, 0, 1, 0, 0, 2 } ) },  // z,d2a
      { 115, Entry( 115, { 0, 1, 1, 0, 0, 0 } ) },  // z,pd
      { 116, Entry( 116, { 0, 1, 0, 1, 0, 0 } ) },  // z,pt
      { 117, Entry( 117, { 0, 0, 1, 0, 0, 1 } ) },  // z,da
      { 152, Entry( 152, { 5, 0, 0, 0, 0, 0 } ) },  // z,5n
      { 153, Entry( 153, { 6, 0, 0, 0, 0, 0 } ) },  // z,6n
      { 154, Entry( 154, { 2, 0, 0, 1, 0, 0 } ) },  // z,2nt
      { 155, Entry( 155, { 0, 0, 0, 1, 0, 1 } ) },  // z,ta
      { 156, Entry( 156, { 4, 1, 0, 0, 0, 0 } ) },  // z,4np
      { 157, Entry( 157, { 3, 0, 1, 0, 0, 0 } ) },  // z,3nd
      { 158, Entry( 158, { 1, 0, 1, 0, 0, 1 } ) },  // z,nda
      { 159, Entry( 159, { 2, 1, 0, 0, 0, 1 } ) },  // z,2npa
      { 160, Entry( 160, { 7, 0, 0, 0, 0, 0 } ) },  // z,7n
      { 161, Entry( 161, { 8, 0, 0, 0, 0, 0 } ) },  // z,8n
      { 162, Entry( 162, { 5, 1, 0, 0, 0, 0 } ) },  // z,5np
      { 163, Entry( 163, { 6, 1, 0, 0, 0, 0 } ) },  // z,6np
      { 164, Entry( 164, { 7, 1, 0, 0, 0, 0 } ) },  // z,7np
      { 165, Entry( 165, { 4, 0, 0, 0, 0, 1 } ) },  // z,4na
      { 166, Entry( 166, { 5, 0, 0, 0, 0, 1 } ) },  // z,5na
      { 167, Entry( 167, { 6, 0, 0, 0, 0, 1 } ) },  // z,6na
      { 168, Entry( 168, { 7, 0, 0, 0, 0, 1 } ) },  // z,7na
      { 169, Entry( 169, { 4, 0, 1, 0, 0, 0 } ) },  // z,4nd
      { 170, Entry( 170, { 5, 0, 1, 0, 0, 0 } ) },  // z,5nd
      { 171, Entry( 171, { 6, 0, 1, 0, 0, 0 } ) },  // z,6nd
      { 172, Entry( 172, { 3, 0, 0, 1, 0, 0 } ) },  // z,3nt
      { 173, Entry( 173, { 4, 0, 0, 1, 0, 0 } ) },  // z,4nt
      { 174, Entry( 174, { 5, 0, 0, 1, 0, 0 } ) },  // z,5nt
      { 175, Entry( 175, { 6, 0, 0, 1, 0, 0 } ) },  // z,6nt
      { 176, Entry( 176, { 2, 0, 0, 0, 1, 0 } ) },  // z,2nh
      { 177, Entry( 177, { 3, 0, 0, 0, 1, 0 } ) },  // z,3nh
      { 178, Entry( 178, { 4, 0, 0, 0, 1, 0 } ) },  // z,4nh
      { 179, Entry( 179, { 3, 2, 0, 0, 0, 0 } ) },  // z,3n2p
      { 180, Entry( 180, { 3, 0, 0, 0, 0, 2 } ) },  // z,3n2a
      { 181, Entry( 181, { 3, 1, 0, 0, 0, 1 } ) },  // z,3npa
      { 182, Entry( 182, { 0, 0, 1, 1, 0, 0 } ) },  // z,dt
      { 183, Entry( 183, { 1, 1, 1, 0, 0, 0 } ) },  // z,npd
      { 184, Entry( 184, { 1, 1, 0, 1, 0, 0 } ) },  // z,npt
      { 185, Entry( 185, { 1, 0, 1, 1, 0, 0 } ) },  // z,ndt
      { 186, Entry( 186, { 1, 1, 0, 0, 1, 0 } ) },  // z,nph
      { 187, Entry( 187, { 1, 0, 1, 0, 1, 0 } ) },  // z,ndh
      { 188, Entry( 188, { 1, 0, 0, 1, 1, 0 } ) },  // z,nth
      { 189, Entry( 189, { 1, 0, 0, 1, 0, 1 } ) },  // z,nta
      { 190, Entry( 190, { 2, 2, 0, 0, 0, 0 } ) },  // z,2n2p
      { 191, Entry( 191, { 0, 1, 0, 0, 1, 0 } ) },  // z,nph
      { 192, Entry( 192, { 0, 0, 1, 0, 1, 0 } ) },  // z,dh
      { 193, Entry( 193, { 0, 0, 0, 0, 1, 1 } ) },  // z,ha
      { 194, Entry( 194, { 4, 2, 0, 0, 0, 0 } ) },  // z,4n2p
      { 195, Entry( 195, { 4, 0, 0, 0, 0, 2 } ) },  // z,4n2a
      { 196, Entry( 196, { 4, 1, 0, 0, 0, 1 } ) },  // z,4npa
      { 197, Entry( 197, { 0, 3, 0, 0, 0, 0 } ) },  // z,3p
      { 198, Entry( 198, { 1, 3, 0, 0, 0, 0 } ) },  // z,n3p
      { 199, Entry( 199, { 3, 2, 0, 0, 0, 1 } ) },  // z,3n2pa
      { 200, Entry( 200, { 5, 2, 0, 0, 0, 0 } ) },  // z,5n2p
      { 600, Entry( 600, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(0)
      { 601, Entry( 601, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(1)
      { 602, Entry( 602, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(2)
      { 603, Entry( 603, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(3)
      { 604, Entry( 604, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(4)
      { 605, Entry( 605, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(5)
      { 606, Entry( 606, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(6)
      { 607, Entry( 607, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(7)
      { 608, Entry( 608, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(8)
      { 609, Entry( 609, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(9)
      { 610, Entry( 610, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(10)
      { 611, Entry( 611, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(11)
      { 612, Entry( 612, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(12)
      { 613, Entry( 613, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(13)
      { 614, Entry( 614, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(14)
      { 615, Entry( 615, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(15)
      { 616, Entry( 616, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(16)
      { 617, Entry( 617, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(17)
      { 618, Entry( 618, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(18)
      { 619, Entry( 619, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(19)
      { 620, Entry( 620, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(20)
      { 621, Entry( 621, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(21)
      { 622, Entry( 622, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(22)
      { 623, Entry( 623, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(23)
      { 624, Entry( 624, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(24)
      { 625, Entry( 625, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(25)
      { 626, Entry( 626, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(26)
      { 627, Entry( 627, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(27)
      { 628, Entry( 628, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(28)
      { 629, Entry( 629, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(29)
      { 630, Entry( 630, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(30)
      { 631, Entry( 631, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(31)
      { 632, Entry( 632, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(32)
      { 633, Entry( 633, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(33)
      { 634, Entry( 634, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(34)
      { 635, Entry( 635, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(35)
      { 636, Entry( 636, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(36)
      { 637, Entry( 637, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(37)
      { 638, Entry( 638, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(38)
      { 639, Entry( 639, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(39)
      { 640, Entry( 640, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(40)
      { 641, Entry( 641, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(41)
      { 642, Entry( 642, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(42)
      { 643, Entry( 643, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(43)
      { 644, Entry( 644, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(44)
      { 645, Entry( 645, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(45)
      { 646, Entry( 646, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(46)
      { 647, Entry( 647, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(47)
      { 648, Entry( 648, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(48)
      { 649, Entry( 649, { 0, 1, 0, 0, 0, 0 } ) },  // z,p(continuum)
      { 650, Entry( 650, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(0)
      { 651, Entry( 651, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(1)
      { 652, Entry( 652, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(2)
      { 653, Entry( 653, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(3)
      { 654, Entry( 654, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(4)
      { 655, Entry( 655, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(5)
      { 656, Entry( 656, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(6)
      { 657, Entry( 657, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(7)
      { 658, Entry( 658, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(8)
      { 659, Entry( 659, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(9)
      { 660, Entry( 660, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(10)
      { 661, Entry( 661, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(11)
      { 662, Entry( 662, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(12)
      { 663, Entry( 663, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(13)
      { 664, Entry( 664, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(14)
      { 665, Entry( 665, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(15)
      { 666, Entry( 666, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(16)
      { 667, Entry( 667, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(17)
      { 668, Entry( 668, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(18)
      { 669, Entry( 669, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(19)
      { 670, Entry( 670, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(20)
      { 671, Entry( 671, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(21)
      { 672, Entry( 672, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(22)
      { 673, Entry( 673, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(23)
      { 674, Entry( 674, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(24)
      { 675, Entry( 675, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(25)
      { 676, Entry( 676, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(26)
      { 677, Entry( 677, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(27)
      { 678, Entry( 678, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(28)
      { 679, Entry( 679, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(29)
      { 680, Entry( 680, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(30)
      { 681, Entry( 681, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(31)
      { 682, Entry( 682, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(32)
      { 683, Entry( 683, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(33)
      { 684, Entry( 684, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(34)
      { 685, Entry( 685, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(35)
      { 686, Entry( 686, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(36)
      { 687, Entry( 687, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(37)
      { 688, Entry( 688, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(38)
      { 689, Entry( 689, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(39)
      { 690, Entry( 690, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(40)
      { 691, Entry( 691, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(41)
      { 692, Entry( 692, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(42)
      { 693, Entry( 693, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(43)
      { 694, Entry( 694, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(44)
      { 695, Entry( 695, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(45)
      { 696, Entry( 696, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(46)
      { 697, Entry( 697, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(47)
      { 698, Entry( 698, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(48)
      { 699, Entry( 699, { 0, 0, 1, 0, 0, 0 } ) },  // z,d(continuum)
      { 700, Entry( 700, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(0)
      { 701, Entry( 701, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(1)
      { 702, Entry( 702, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(2)
      { 703, Entry( 703, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(3)
      { 704, Entry( 704, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(4)
      { 705, Entry( 705, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(5)
      { 706, Entry( 706, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(6)
      { 707, Entry( 707, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(7)
      { 708, Entry( 708, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(8)
      { 709, Entry( 709, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(9)
      { 710, Entry( 710, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(10)
      { 711, Entry( 711, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(11)
      { 712, Entry( 712, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(12)
      { 713, Entry( 713, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(13)
      { 714, Entry( 714, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(14)
      { 715, Entry( 715, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(15)
      { 716, Entry( 716, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(16)
      { 717, Entry( 717, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(17)
      { 718, Entry( 718, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(18)
      { 719, Entry( 719, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(19)
      { 720, Entry( 720, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(20)
      { 721, Entry( 721, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(21)
      { 722, Entry( 722, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(22)
      { 723, Entry( 723, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(23)
      { 724, Entry( 724, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(24)
      { 725, Entry( 725, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(25)
      { 726, Entry( 726, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(26)
      { 727, Entry( 727, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(27)
      { 728, Entry( 728, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(28)
      { 729, Entry( 729, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(29)
      { 730, Entry( 730, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(30)
      { 731, Entry( 731, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(31)
      { 732, Entry( 732, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(32)
      { 733, Entry( 733, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(33)
      { 734, Entry( 734, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(34)
      { 735, Entry( 735, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(35)
      { 736, Entry( 736, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(36)
      { 737, Entry( 737, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(37)
      { 738, Entry( 738, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(38)
      { 739, Entry( 739, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(39)
      { 740, Entry( 740, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(40)
      { 741, Entry( 741, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(41)
      { 742, Entry( 742, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(42)
      { 743, Entry( 743, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(43)
      { 744, Entry( 744, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(44)
      { 745, Entry( 745, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(45)
      { 746, Entry( 746, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(46)
      { 747, Entry( 747, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(47)
      { 748, Entry( 748, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(48)
      { 749, Entry( 749, { 0, 0, 0, 1, 0, 0 } ) },  // z,t(continuum)
      { 750, Entry( 750, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(0)
      { 751, Entry( 751, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(1)
      { 752, Entry( 752, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(2)
      { 753, Entry( 753, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(3)
      { 754, Entry( 754, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(4)
      { 755, Entry( 755, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(5)
      { 756, Entry( 756, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(6)
      { 757, Entry( 757, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(7)
      { 758, Entry( 758, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(8)
      { 759, Entry( 759, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(9)
      { 760, Entry( 760, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(10)
      { 761, Entry( 761, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(11)
      { 762, Entry( 762, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(12)
      { 763, Entry( 763, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(13)
      { 764, Entry( 764, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(14)
      { 765, Entry( 765, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(15)
      { 766, Entry( 766, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(16)
      { 767, Entry( 767, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(17)
      { 768, Entry( 768, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(18)
      { 769, Entry( 769, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(19)
      { 770, Entry( 770, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(20)
      { 771, Entry( 771, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(21)
      { 772, Entry( 772, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(22)
      { 773, Entry( 773, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(23)
      { 774, Entry( 774, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(24)
      { 775, Entry( 775, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(25)
      { 776, Entry( 776, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(26)
      { 777, Entry( 777, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(27)
      { 778, Entry( 778, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(28)
      { 779, Entry( 779, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(29)
      { 780, Entry( 780, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(30)
      { 781, Entry( 781, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(31)
      { 782, Entry( 782, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(32)
      { 783, Entry( 783, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(33)
      { 784, Entry( 784, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(34)
      { 785, Entry( 785, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(35)
      { 786, Entry( 786, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(36)
      { 787, Entry( 787, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(37)
      { 788, Entry( 788, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(38)
      { 789, Entry( 789, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(39)
      { 790, Entry( 790, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(40)
      { 791, Entry( 791, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(41)
      { 792, Entry( 792, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(42)
      { 793, Entry( 793, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(43)
      { 794, Entry( 794, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(44)
      { 795, Entry( 795, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(45)
      { 796, Entry( 796, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(46)
      { 797, Entry( 797, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(47)
      { 798, Entry( 798, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(48)
      { 799, Entry( 799, { 0, 0, 0, 0, 1, 0 } ) },  // z,h(continuum)
      { 800, Entry( 800, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(0)
      { 801, Entry( 801, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(1)
      { 802, Entry( 802, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(2)
      { 803, Entry( 803, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(3)
      { 804, Entry( 804, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(4)
      { 805, Entry( 805, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(5)
      { 806, Entry( 806, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(6)
      { 807, Entry( 807, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(7)
      { 808, Entry( 808, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(8)
      { 809, Entry( 809, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(9)
      { 810, Entry( 810, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(10)
      { 811, Entry( 811, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(11)
      { 812, Entry( 812, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(12)
      { 813, Entry( 813, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(13)
      { 814, Entry( 814, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(14)
      { 815, Entry( 815, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(15)
      { 816, Entry( 816, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(16)
      { 817, Entry( 817, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(17)
      { 818, Entry( 818, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(18)
      { 819, Entry( 819, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(19)
      { 820, Entry( 820, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(20)
      { 821, Entry( 821, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(21)
      { 822, Entry( 822, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(22)
      { 823, Entry( 823, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(23)
      { 824, Entry( 824, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(24)
      { 825, Entry( 825, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(25)
      { 826, Entry( 826, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(26)
      { 827, Entry( 827, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(27)
      { 828, Entry( 828, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(28)
      { 829, Entry( 829, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(29)
      { 830, Entry( 830, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(30)
      { 831, Entry( 831, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(31)
      { 832, Entry( 832, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(32)
      { 833, Entry( 833, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(33)
      { 834, Entry( 834, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(34)
      { 835, Entry( 835, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(35)
      { 836, Entry( 836, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(36)
      { 837, Entry( 837, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(37)
      { 838, Entry( 838, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(38)
      { 839, Entry( 839, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(39)
      { 840, Entry( 840, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(40)
      { 841, Entry( 841, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(41)
      { 842, Entry( 842, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(42)
      { 843, Entry( 843, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(43)
      { 844, Entry( 844, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(44)
      { 845, Entry( 845, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(45)
      { 846, Entry( 846, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(46)
      { 847, Entry( 847, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(47)
      { 848, Entry( 848, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(48)
      { 849, Entry( 849, { 0, 0, 0, 0, 0, 1 } ) },  // z,a(continuum)
      { 875, Entry( 875, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(0)
      { 876, Entry( 876, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(1)
      { 877, Entry( 877, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(2)
      { 878, Entry( 878, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(3)
      { 879, Entry( 879, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(4)
      { 880, Entry( 880, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(5)
      { 881, Entry( 881, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(6)
      { 882, Entry( 882, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(7)
      { 883, Entry( 883, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(8)
      { 884, Entry( 884, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(9)
      { 885, Entry( 885, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(10)
      { 886, Entry( 886, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(11)
      { 887, Entry( 887, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(12)
      { 888, Entry( 888, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(13)
      { 889, Entry( 889, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(14)
      { 890, Entry( 890, { 2, 0, 0, 0, 0, 0 } ) },  // z,2n(15)
      { 891, Entry( 891, { 2, 0, 0, 0, 0, 0 } ) }   // z,2n(continuum)
    };

    inline static const std::unordered_set< int > fission_ = {

       18,  19,  20,  21,  38
    };
    inline static const std::unordered_set< int > atomic_ = {

      501, 502, 504, 505, 506, 515, 516, 517, 522, 523,
      525, 526, 527, 528, 534, 535, 536, 537, 538, 539,
      540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
      550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
      560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
      570, 571, 572
    };
    inline static const std::unordered_set< int > derived_ = {

      203, 204, 205, 206, 207, 251, 252, 253
    };
    inline static const std::unordered_set< int > lumped_covariance_ = {

      851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
      861, 862, 863, 864, 865, 866, 867, 868, 869, 870
    };
    inline static const std::unordered_set< int > summation_or_primary_ = {

       16,  18, 103, 104, 105, 106, 107, 526
    };
    inline static const std::unordered_set< int > summation_ = {

        1,   3,   4,  27, 101, 501, 516, 522
    };
    inline static const std::unordered_set< int > primary_ = {

        2,   5,  11,  17,  19,  20,  21,  22,  23,  24,  25,
       28,  29,  30,  32,  33,  34,  35,  36,  37,  38,
       41,  42,  44,  45,  50,  51,  52,  53,  54,  55,
       56,  57,  58,  59,  60,  61,  62,  63,  64,  65,
       66,  67,  68,  69,  70,  71,  72,  73,  74,  75,
       76,  77,  78,  79,  80,  81,  82,  83,  84,  85,
       86,  87,  88,  89,  90,  91, 102, 108, 109, 111,
      112, 113, 114, 115, 116, 117, 152, 153, 154, 155,
      156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
      166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
      176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
      186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
      196, 197, 198, 199, 200, 502, 504, 505, 506, 515,
      517, 523, 525, 527, 528, 534, 535, 536, 537, 538,
      539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
      549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
      559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
      569, 570, 571, 572,
      600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
      610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
      620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
      630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
      640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
      650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
      660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
      670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
      680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
      690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
      700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
      710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
      720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
      730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
      740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
      750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
      760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
      770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
      780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
      790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
      800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
      810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
      820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
      830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
      840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
      875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
      885, 886, 887, 888, 889, 890, 891
    };
    inline static const std::map< int, std::vector< int > > partials_ = {

      {   1, {  } },
      {   3, {  } },
      {   4, {  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                61,  62,  63,  64,  65,  66,  67,  68,  69,  70,
                71,  72,  73,  74,  75,  76,  77,  78,  79,  80,
                81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
                91 } },
      {  16, { 875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
               885, 886, 887, 888, 889, 890, 891 } },
      {  18, {  19,  20,  21,  38 } },
      {  27, {  } },
      { 101, {  } },
      { 103, { 600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
               610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
               620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
               630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
               640, 641, 642, 643, 644, 645, 646, 647, 648, 649 } },
      { 104, { 650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
               660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
               670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
               680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
               690, 691, 692, 693, 694, 695, 696, 697, 698, 699 } },
      { 105, { 700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
               710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
               720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
               730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
               740, 741, 742, 743, 744, 745, 746, 747, 748, 749 } },
      { 106, { 750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
               760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
               770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
               780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
               790, 791, 792, 793, 794, 795, 796, 797, 798, 799 } },
      { 107, { 800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
               810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
               820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
               830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
               840, 841, 842, 843, 844, 845, 846, 847, 848, 849 } },
      { 501, { 502, 504, 515, 517, 525,      527, 528, 534, 535,
               536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
               546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
               556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
               566, 567, 568, 569, 570, 571, 572 } },
      { 516, { 515, 517 } },
      { 522, { 534, 535, 536, 537, 538, 539, 540, 541, 542, 543,
               544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
               554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
               564, 565, 566, 567, 568, 569, 570, 571, 572 } },
      { 526, { 525 } }
    };

  public:

    /**
     *  @brief Return whether or not the MT number is valid
     *
     *  @param[in] mt         the MT number
     */
    static bool isValid( int mt ) {

      if ( ( mt > 0 ) && ( mt < 1000 ) ) {

        if ( ( primary_.find( mt ) == primary_.end() ) &&
             ( summation_.find( mt ) == summation_.end() ) &&
             ( summation_or_primary_.find( mt ) == summation_or_primary_.end() ) &&
             ( derived_.find( mt ) == derived_.end() ) ) {

          return false;
        }

        return true;
      }

      return false;
    }

    /**
     *  @brief Return whether or not the MT number is for a fission reaction
     *
     *  @param[in] mt         the MT number
     */
    static bool isFission( int mt ) {

      return fission_.find( mt ) != fission_.end();
    }

    /**
     *  @brief Return whether or not the MT number is for an atomic reaction
     *
     *  @param[in] mt         the MT number
     */
    static bool isAtomic( int mt ) {

      return atomic_.find( mt ) != atomic_.end();
    }

    /**
     *  @brief Return whether or not the MT number is for a derived reaction
     *
     *  @param[in] mt         the MT number
     */
    static bool isDerived( int mt ) {

      return derived_.find( mt ) != derived_.end();
    }

    /**
     *  @brief Return whether or not the MT number is for a lumped covariance reaction
     *
     *  @param[in] mt         the MT number
     */
    static bool isLumpedCovariance( int mt ) {

      return lumped_covariance_.find( mt ) != lumped_covariance_.end();
    }

    /**
     *  @brief Return whether or not the MT number is for a summation reaction
     *
     *  @param[in] material   the ENDF material
     *  @param[in] mt         the MT number
     */
    static bool isSummation( const ENDFtk::tree::Material& material, int mt ) {

      switch ( mt ) {

        case  16 : return material.hasSection( 3, 875 ) ? true : false;
        case  18 : return material.hasSection( 3, 19 )  ? true : false;
        case 103 : return material.hasSection( 3, 600 ) ? true : false;
        case 104 : return material.hasSection( 3, 650 ) ? true : false;
        case 105 : return material.hasSection( 3, 700 ) ? true : false;
        case 106 : return material.hasSection( 3, 750 ) ? true : false;
        case 107 : return material.hasSection( 3, 800 ) ? true : false;
        case 526 : return material.hasSection( 23, 525 ) ? true : false;
        default : {

          return summation_.find( mt ) != summation_.end();
        }
      }
    }

    /**
     *  @brief Return whether or not the MT number is for a primary reaction
     *
     *  @param[in] material   the ENDF material
     *  @param[in] mt         the MT number
     */
    static bool isPrimary( const ENDFtk::tree::Material& material, int mt ) {

      switch ( mt ) {

        case  16 : return material.hasSection( 3, 875 ) ? false : true;
        case  18 : return material.hasSection( 3, 19 )  ? false : true;
        case 103 : return material.hasSection( 3, 600 ) ? false : true;
        case 104 : return material.hasSection( 3, 650 ) ? false : true;
        case 105 : return material.hasSection( 3, 700 ) ? false : true;
        case 106 : return material.hasSection( 3, 750 ) ? false : true;
        case 107 : return material.hasSection( 3, 800 ) ? false : true;
        case 526 : return material.hasSection( 23, 525 ) ? false : true;
        default : {

          return primary_.find( mt ) != primary_.end();
        }
      }
    }

    /**
     *  @brief Return the partial mt numbers for a summation mt number
     *
     *  @param[in] material   the ENDF material
     *  @param[in] mf         the MF number
     *  @param[in] mt         the MT number
     */
    static std::vector< int > partials( const ENDFtk::tree::Material& material,
                                        int mf, int mt ) {

      std::vector< int > partials;
      if ( mf == 3 && mt == 1 ) {

        auto sections = material.file( mf ).sectionNumbers();
        std::copy_if( sections.begin(), sections.end(),
                      std::back_inserter( partials ),
                      [&material] ( auto&& value ) { return isPrimary( material, value ); } );
      }
      else if ( mf == 33 && isLumpedCovariance( mt ) ) {

        auto covariances = material.file( 33 ).parse< 33 >();
        for ( const auto& section : covariances ) {

          if ( section.lumpedCovarianceIndex() == mt ) {

            partials.push_back( section.MT() );
          }
        }
      }
      else if ( isSummation( material, mt ) ) {

        // create a vector of partial mt numbers that are present
        std::copy_if( partials_.at( mt ).begin(), partials_.at( mt ).end(),
                      std::back_inserter( partials ),
                      [&material, mf] ( auto&& value ) { return material.hasSection( mf, value ); } );

        // add deficiency mt number for total elastic in electro-atomic data
        auto iter = std::lower_bound( partials.begin(), partials.end(), 525 );
        if ( iter != partials.end() ) {

          if ( *iter == 525 ) {

            partials.insert( iter + 1, -526 );
          }
        }
      }
      return partials;
    }

    /**
     *  @brief Return whether or not the MT number has secondary particles
     *
     *  @param[in] mt    the MT number
     */
    static bool hasSecondaryParticles( int mt ) {

      return entries_.find( mt ) != entries_.end();
    }

    /**
     *  @brief Return the number of secondary neutrons
     *
     *  @param[in] mt    the MT number
     */
    static int neutrons( int mt ) {

      auto iter = entries_.find( mt );
      if ( iter != entries_.end() ) {

        return iter->second.neutrons();
      }
      return 0;
    }

    /**
     *  @brief Return the number of secondary protons
     *
     *  @param[in] mt    the MT number
     */
    static int protons( int mt ) {

      auto iter = entries_.find( mt );
      if ( iter != entries_.end() ) {

        return iter->second.protons();
      }
      return 0;
    }

    /**
     *  @brief Return the number of secondary deuterons
     *
     *  @param[in] mt    the MT number
     */
    static int deuterons( int mt ) {

      auto iter = entries_.find( mt );
      if ( iter != entries_.end() ) {

        return iter->second.deuterons();
      }
      return 0;
    }

    /**
     *  @brief Return the number of secondary tritons
     *
     *  @param[in] mt    the MT number
     */
    static int tritons( int mt ) {

      auto iter = entries_.find( mt );
      if ( iter != entries_.end() ) {

        return iter->second.tritons();
      }
      return 0;
    }

    /**
     *  @brief Return the number of secondary helions
     *
     *  @param[in] mt    the MT number
     */
    static int helions( int mt ) {

      auto iter = entries_.find( mt );
      if ( iter != entries_.end() ) {

        return iter->second.helions();
      }
      return 0;
    }

    /**
     *  @brief Return the number of secondary alphas
     *
     *  @param[in] mt    the MT number
     */
    static int alphas( int mt ) {

      auto iter = entries_.find( mt );
      if ( iter != entries_.end() ) {

        return iter->second.alphas();
      }
      return 0;
    }
  };

} // endf namespace
} // format namespace
} // dryad namespace
} // njoy namespace

#endif
